type Organization {
  _id: ID!
  image: String!
  author: String!
  name: String!
  email: String!
  description: String!
  phone: String!
  followers: [String]!
  following: [String]!
  operators: [Ioperators]!
  facebook: String!
  linkedIn: String!
  instagram: String!
  twitter: String!
  country: String!
  city: String!
  website: String!
}

scalar Upload

type Ioperators {
  userId: String
  role: String
}

type Query {
  getOrganzations: [Organization!]!
  getOrganzation(id: ID!): Organization!
  getUserOrganizations(id: ID!): [Organization!]!
}

type File {
    filename: String!
    mimetype: String!
    encoding: String!
  }

input CreateOrgInput{
  name: String!
  email: String!
  phone: String!
  description: String!
  website: String!
  }

  input UpdateInput{
  name: String!
  linkedIn: String!
  facebook: String!
  orgId: String!
  email: String!
  phone: String!
  instagram: String!
  twitter: String!
  country: String!
  state: String!
  city: String!
  website: String!
  }

  input UploadImageInput {
    uploadImage: String!
    orgId: ID!
  }

  input CreateOperator {
    userId: ID!
    role: String!
    orgId: ID!
  }

  input DeleteOperator {
    orgId: ID!
    userId: ID!
  }

type Mutation {
  createOrg(input: CreateOrgInput!): Organization!
  updateOrganization(input: UpdateInput!): Organization!
  updateImage(input: UploadImageInput!): Organization!
  addOperator(input: CreateOperator!): Organization!
  deleteOperator(input: DeleteOperator!): Organization!
}