type Event {
  _id: ID
  name: String!
  description: String!
  time: String!
  image: String!
  type: String! #online or offline
  audience: String # Everyone or My Connections or Location
  startDate: String!
  endDate: String!
  interested: [Interested!]!
  shares: Int!
  likes: [String]!
  createdAt: Date
  updatedAt: Date
  authorId: String!
  author: Author!
  promoted: Boolean!
}


type Interested {
  authorId: ID!
  authorImg: String!
  name: String!
}


type Query {
  events(page: Int, limit: Int, filter: String): [Event!]!
  event(eventId: ID!): Event!
  authorEvents(authorId: ID!, page: Int, limit: Int, filter: String): [Event!]!
  interestedEvent(authorId: ID!): [Event!]!
}


type Mutation {
  createEvent(name: String!, description: String!, time: String!, startDate: String!, endDate: String!, imageFile: String!, type: String!): Event!
  createEventOrg(name: String!, description: String!, time: String!, startDate: String!, endDate: String!, imageFile: String!, type: String!, authorId: ID!): Event!
  updateEvent(name: String!, description: String!, time: String!, startDate: String!, endDate: String!, imageFile: String!, type: String!, eventId: ID!, authorId: ID!): Event!
  interested(eventId: String!, authorId: ID!, authorImg: String!, name: String!): Event!
  deleteEvent(eventId: ID!): String
}